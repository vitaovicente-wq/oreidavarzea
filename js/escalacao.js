// ===== IN√çCIO DO SCRIPT JS/ESCALACAO.JS =====

// ========== ESTADO DO JOGO ==========
let hired = []; let userData = {}; let financas = {}; let zapMessages = []; let teamStats = {};

// ========== DADOS GERAIS ==========
const treatments = [ { id: 'gelol', name: 'Massagem com Gelol', cost: 10, cost_type: 'fixed', health_gain: 8 }, { id: 'reza', name: 'Reza da Dona Maria', cost: 5, cost_type: 'fixed', health_gain: 15 }, { id: 'mocoto', name: 'Caldo de Mocot√≥', cost: 15, cost_type: 'fixed', health_gain: 18 }, { id: 'pregacao', name: 'Prega√ß√£o do Pastor Elias', cost: 0.10, cost_type: 'percentage', health_gain: 13 }, { id: 'garrafada', name: 'Garrafada Misteriosa', cost: 20, cost_type: 'fixed', health_gain: () => Math.floor(Math.random() * 21) + 5 }, { id: 'salgrosso', name: 'Banho de Sal Grosso', cost: 2, cost_type: 'fixed', health_gain: 5 }, { id: 'benzetacil', name: 'Benzetacil', cost: 30, cost_type: 'fixed', health_gain: 20 } ];
const tairoQuotes = {
    low: [ "Chefe, esse aqui t√° na UTI do Postinho. Se botar pra jogar, ele desmonta. O caso √© grave e pede o tratamento de choque: uma <strong>Benzetacil</strong>.", "A conta chegou pra esse guerreiro. √â o seguinte: ou a gente aplica a artilharia pesada, uma <strong>Benzetacil</strong> pra ontem, ou ele vai estourar um m√∫sculo e ficar 3 meses parado.", "N√£o tem massagem que resolva isso aqui, professor. Isso n√£o √© cansa√ßo, √© quase um pedido de aposentadoria. Sem conversa, o protocolo √© <strong>Benzetacil</strong>." ],
    medium: [ "O motor desse aqui t√° fadigado, t√° batendo pino. T√° precisando de sust√¢ncia. Um <strong>Caldo de Mocot√≥ do Seu Z√©</strong> ajeita a m√°quina e enche o tanque.", "Esse aqui t√° com o corpo pesado, parece que tem 'olho gordo' em cima. Leva ele na <strong>Dona Maria pra uma reza forte</strong>, √© o melhor rem√©dio pra tirar essa zica.", "A les√£o dele n√£o √© s√≥ no m√∫sculo, √© na confian√ßa. T√° cabisbaixo. A <strong>Prega√ß√£o do Pastor Elias</strong> vai levantar a moral desse rapaz e botar ele de p√© de novo." ],
    high: [ "Isso a√≠ √© manha de jogador querendo fugir do treino. Manda uma <strong>Massagem com Gelol</strong> que essa frescura passa rapidinho.", "Esse a√≠ t√° com a lataria arranhada, coisa de jogo. Nada que uma boa <strong>Massagem com Gelol</strong> n√£o resolva.", "Diagn√≥stico: dorzinha de cabe√ßa de zagueiro. Protocolo: <strong>Massagem com Gelol</strong> e um esporro pra parar de chorar. Pr√≥ximo!" ]
};
const formations = { '4-4-2': [ { top: '5%', slots: [{ pos: 'Goleiro', text: 'üß§ Goleiro' }] }, { top: '25%', slots: [{ pos: 'Lateral', text: '‚¨ÖÔ∏è Lateral Esq.' }, { pos: 'Zagueiro', text: 'üõ°Ô∏è Zagueiro' }, { pos: 'Zagueiro', text: 'üõ°Ô∏è Zagueiro' }, { pos: 'Lateral', text: '‚û°Ô∏è Lateral Dir.' }] }, { top: '55%', slots: [{ pos: 'Meia', text: 'üéØ Meia Esq.' }, { pos: 'Volante', text: '‚öîÔ∏è Volante' }, { pos: 'Volante', text: '‚öîÔ∏è Volante' }, { pos: 'Meia', text: 'üéØ Meia Dir.' }] }, { top: '85%', slots: [{ pos: 'Atacante', text: '‚öΩ Atacante' }, { pos: 'Atacante', text: '‚öΩ Atacante' }] } ], '4-3-3': [ { top: '5%', slots: [{ pos: 'Goleiro', text: 'üß§ Goleiro' }] }, { top: '25%', slots: [{ pos: 'Lateral', text: '‚¨ÖÔ∏è Lateral Esq.' }, { pos: 'Zagueiro', text: 'üõ°Ô∏è Zagueiro' }, { pos: 'Zagueiro', text: 'üõ°Ô∏è Zagueiro' }, { pos: 'Lateral', text: '‚û°Ô∏è Lateral Dir.' }] }, { top: '55%', slots: [{ pos: 'Volante', text: '‚öîÔ∏è Volante' }, { pos: 'Meia', text: 'üéØ Meia' }, { pos: 'Meia', text: 'üéØ Meia' }] }, { top: '85%', slots: [{ pos: 'Atacante', text: '‚öΩ Ponta Esq.' }, { pos: 'Atacante', text: '‚öΩ Centroavante' }, { pos: 'Atacante', text: '‚öΩ Ponta Dir.' }] } ], '3-5-2': [ { top: '5%', slots: [{ pos: 'Goleiro', text: 'üß§ Goleiro' }] }, { top: '25%', slots: [{ pos: 'Zagueiro', text: 'üõ°Ô∏è Zagueiro' }, { pos: 'Zagueiro', text: 'üõ°Ô∏è L√≠bero' }, { pos: 'Zagueiro', text: 'üõ°Ô∏è Zagueiro' }] }, { top: '55%', slots: [{ pos: 'Lateral', text: 'üèÉ Ala Esq.' }, { pos: 'Volante', text: '‚öîÔ∏è Volante' }, { pos: 'Meia', text: 'üéØ Meia Central' }, { pos: 'Volante', text: '‚öîÔ∏è Volante' }, { pos: 'Lateral', text: 'üèÉ Ala Dir.' }] }, { top: '85%', slots: [{ pos: 'Atacante', text: '‚öΩ Atacante' }, { pos: 'Atacante', text: '‚öΩ Atacante' }] } ], '4-2-4': [ { top: '5%', slots: [{ pos: 'Goleiro', text: 'üß§ Goleiro' }] }, { top: '25%', slots: [{ pos: 'Lateral', text: '‚¨ÖÔ∏è Lateral Esq.' }, { pos: 'Zagueiro', text: 'üõ°Ô∏è Zagueiro' }, { pos: 'Zagueiro', text: 'üõ°Ô∏è Zagueiro' }, { pos: 'Lateral', text: '‚û°Ô∏è Lateral Dir.' }] }, { top: '55%', slots: [{ pos: 'Meia', text: 'üéØ Meia' }, { pos: 'Meia', text: 'üéØ Meia' }] }, { top: '85%', slots: [{ pos: 'Atacante', text: '‚öΩ Ponta Esq.' }, { pos: 'Atacante', text: '‚öΩ Atacante' }, { pos: 'Atacante', text: '‚öΩ Atacante' }, { pos: 'Atacante', text: '‚öΩ Ponta Dir.' }] } ], '5-4-1': [ { top: '5%', slots: [{ pos: 'Goleiro', text: 'üß§ Goleiro' }] }, { top: '25%', slots: [{ pos: 'Lateral', text: '‚¨ÖÔ∏è Lateral Esq.' }, { pos: 'Zagueiro', text: 'üõ°Ô∏è Zagueiro' }, { pos: 'Zagueiro', text: 'üõ°Ô∏è L√≠bero' }, { pos: 'Zagueiro', text: 'üõ°Ô∏è Zagueiro' }, { pos: 'Lateral', text: '‚û°Ô∏è Lateral Dir.' }] }, { top: '55%', slots: [{ pos: 'Meia', text: 'üéØ Meia Esq.' }, { pos: 'Volante', text: '‚öîÔ∏è Volante' }, { pos: 'Volante', text: '‚öîÔ∏è Volante' }, { pos: 'Meia', text: 'üéØ Meia Dir.' }] }, { top: '85%', slots: [{ pos: 'Atacante', text: '‚öΩ Centroavante' }] } ] };
const trainingSessions = [ { id: 'rachao', name: 'Rach√£o de Quinta ü•©', description: 'Coletivo pegado para melhorar o entrosamento e a habilidade geral de todos.', cost: 50, cost_health: 10, focus: 'all', reward_type: 'skill', reward_chance: 0.10, reward_value: 1 }, { id: 'dois_toques', name: 'Dois Toques ‚öΩ', description: 'Treino t√©cnico em campo reduzido para aprimorar o passe e a vis√£o de jogo.', cost: 10, cost_health: 5, focus: ['Meia', 'Volante'], reward_type: 'skill', reward_chance: 0.25, reward_value: 1 }, { id: 'finalizacao', name: 'Finaliza√ß√£o at√© o Sol se Por ü•Ö', description: 'Atacantes aprimoram a pontaria com chutes de todos os jeitos.', cost: 0, cost_health: 8, focus: ['Atacante'], reward_type: 'skill', reward_chance: 0.40, reward_value: 1 }, { id: 'muralha', name: 'Muralha Defensiva üß±', description: 'Treino intenso de posicionamento e bote para zagueiros e laterais.', cost: 0, cost_health: 8, focus: ['Zagueiro', 'Lateral'], reward_type: 'skill', reward_chance: 0.40, reward_value: 1 }, { id: 'corrida_morro', name: 'Corrida no Morro üèÉ', description: 'Preparo f√≠sico bruto para aumentar a resist√™ncia do elenco nas partidas.', cost: 20, cost_health: 15, focus: 'all', reward_type: 'stamina', reward_value: 5 }, { id: 'churrasco', name: 'Churrasco do Nelson üçñ', description: 'N√£o melhora a t√©cnica, mas nada une mais o time que uma picanha na brasa.', cost: 100, cost_health: 0, focus: 'all', reward_type: 'entrosamento', reward_value: 5 } ];

const elements = {
  headerTitle: document.getElementById('headerTitle'), bench: document.getElementById('bench'), btnPlayMatch: document.getElementById('btnPlayMatch'),
  linkTela4: document.getElementById('linkTela4'), formationSelect: document.getElementById('formationSelect'), pitch: document.getElementById('pitch'),
  cashDisplay: document.getElementById('cashDisplay'), financeBox: document.getElementById('financeBox'), financeModal: document.getElementById('financeModal'),
  financeModalClose: document.getElementById('financeModalClose'), playerModal: document.getElementById('playerModal'), playerModalClose: document.getElementById('playerModalClose'),
  modalTitle: document.getElementById('modalTitle'), modalSubtitle: document.getElementById('modalSubtitle'), playerList: document.getElementById('playerList'),
  modalCash: document.getElementById('modalCash'), modalRevenueMatches: document.getElementById('modalRevenueMatches'),
  modalRevenueSponsors: document.getElementById('modalRevenueSponsors'), modalExpenseSignings: document.getElementById('modalExpenseSignings'),
  modalExpenseSalaries: document.getElementById('modalExpenseSalaries'), modalExpenseBonus: document.getElementById('modalExpenseBonus'),
  modalBalance: document.getElementById('modalBalance'), zapButton: document.getElementById('zapButton'),
  zapNotification: document.getElementById('zapNotification'), zapModal: document.getElementById('zapModal'),
  zapModalClose: document.getElementById('zapModalClose'), chatContainer: document.getElementById('chatContainer'),
  postinhoButton: document.getElementById('postinhoButton'), postinhoModal: document.getElementById('postinhoModal'),
  postinhoModalClose: document.getElementById('postinhoModalClose'), postinhoPlayerList: document.getElementById('postinhoPlayerList'),
  treatmentPanel: document.getElementById('treatmentPanel'),
  treinoButton: document.getElementById('treinoButton'), treinoModal: document.getElementById('treinoModal'),
  treinoModalClose: document.getElementById('treinoModalClose'), treinoList: document.getElementById('treinoList')
};

function showNotif(text, time = 3000) { const box = document.createElement('div'); box.className = 'notif'; box.textContent = text; document.body.appendChild(box); setTimeout(() => box.remove(), time); }
function formatReal(n) { return 'R$ ' + n.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }); }
function renderSkillBar(skill) { return `<div class="skill-bar"><div class="skill-fill" style="width: ${skill}%"></div></div>`; }
function renderHealthBar(health) { const color = health > 70 ? '#28a745' : health > 40 ? '#ffc107' : '#dc3545'; return `<div class="health-bar"><div class="health-fill" style="width: ${health}%; background-color: ${color};"></div></div>`; }

function openFinanceModal() { elements.modalCash.textContent = formatReal(financas.caixaAtual); elements.modalRevenueMatches.textContent = `+ ${formatReal(financas.receitaPartidas)}`; elements.modalRevenueSponsors.textContent = `+ ${formatReal(financas.receitaPremiosPatrocinios)}`; elements.modalExpenseSignings.textContent = `- ${formatReal(financas.gastosContratacoes)}`; elements.modalExpenseSalaries.textContent = `- ${formatReal(financas.gastosSalarios)}`; elements.modalExpenseBonus.textContent = `- ${formatReal(financas.gastosBicho)}`; const totalReceitas = financas.receitaPartidas + financas.receitaPremiosPatrocinios; const totalDespesas = financas.gastosContratacoes + financas.gastosSalarios + financas.gastosBicho; const balanco = totalReceitas - totalDespesas; elements.modalBalance.textContent = formatReal(balanco); elements.modalBalance.style.color = balanco >= 0 ? 'green' : 'red'; elements.financeModal.style.display = 'block'; }
function openZapModal() { elements.chatContainer.innerHTML = ''; if (zapMessages.length === 0) { elements.chatContainer.innerHTML = '<p class="muted" style="text-align: center; padding-top: 20px;">Nenhuma mensagem nova.</p>'; } else { zapMessages.sort((a, b) => new Date(b.date) - new Date(a.date)); zapMessages.forEach(msg => { const messageDiv = document.createElement('div'); messageDiv.className = 'chat-message'; messageDiv.innerHTML = `<div class="message-bubble"><div class="message-sender">${msg.from}</div><div>${msg.text}</div></div>`; elements.chatContainer.appendChild(messageDiv); }); } elements.zapModal.style.display = 'block'; elements.zapNotification.style.display = 'none'; markMessagesAsRead(); }
function markMessagesAsRead() { zapMessages.forEach(msg => msg.read = true); localStorage.setItem('zapMessages', JSON.stringify(zapMessages)); }
function checkZapNotifications() { const unreadCount = zapMessages.filter(m => !m.read).length; if (unreadCount > 0) { elements.zapNotification.style.display = 'flex'; elements.zapNotification.textContent = unreadCount; } else { elements.zapNotification.style.display = 'none'; } }
function drawPitch(formationName) { elements.pitch.innerHTML = ''; const layout = formations[formationName]; if (!layout) return; let slotCounter = 0; layout.forEach(line => { const lineDiv = document.createElement('div'); lineDiv.className = 'formation-line'; lineDiv.style.top = line.top; line.slots.forEach(slotInfo => { const slotDiv = document.createElement('div'); slotDiv.className = 'position-slot'; slotDiv.id = `slot-${slotCounter++}`; slotDiv.dataset.pos = slotInfo.pos; slotDiv.innerHTML = `<div>${slotInfo.text}</div><div class="muted">Clique para escalar</div>`; lineDiv.appendChild(slotDiv); }); elements.pitch.appendChild(lineDiv); }); addSlotClickListeners(); }
function addSlotClickListeners() { document.querySelectorAll('.position-slot').forEach(slot => { slot.addEventListener('click', () => { openPlayerModal(slot); }); }); }
function unassignAllPlayers() { document.querySelectorAll('.position-slot[data-assigned]').forEach(slot => { const textDiv = slot.querySelector('div:first-child'); if(textDiv) { const originalText = textDiv.innerHTML; slot.innerHTML = `<div>${originalText}</div><div class="muted">Clique para escalar</div>`; } delete slot.dataset.assigned; slot.classList.remove('assigned'); }); populateBench(); elements.btnPlayMatch.disabled = true; }
function openPlayerModal(slotElement) { const posicao = slotElement.dataset.pos; elements.playerModal.querySelector('#modalTitle').textContent = `Escalar ${posicao}`; elements.playerModal.querySelector('#modalSubtitle').textContent = `Selecione um jogador`; const playerList = elements.playerModal.querySelector('#playerList'); playerList.innerHTML = ''; const posicoesValidas = { 'Goleiro': ['Goleiro'], 'Lateral': ['Lateral'], 'Zagueiro': ['Zagueiro'], 'Volante': ['Volante'], 'Meia': ['Meia'], 'Atacante': ['Atacante'] }; const posicoesAceitas = posicoesValidas[posicao] || [posicao]; const jogadoresDisponiveis = hired.filter(jogador => posicoesAceitas.includes(jogador.pos) && !document.querySelector(`[data-assigned="${jogador.id}"]`)); if (jogadoresDisponiveis.length === 0) { playerList.innerHTML = '<p class="muted">Nenhum jogador dispon√≠vel</p>'; } else { jogadoresDisponiveis.forEach(jogador => { const item = document.createElement('div'); item.className = 'modal-player-item'; item.innerHTML = `<div><div class="player-with-tooltip"><strong>${jogador.name}</strong><span class="tooltip-text">"${jogador.apresentacao}"</span></div> ‚Ä¢ ${jogador.pos}</div><div class="muted">${jogador.age} anos ‚Ä¢ ${jogador.foot} ‚Ä¢ Habilidade: ${jogador.skill}% ‚Ä¢ Sa√∫de: ${jogador.health}%</div><div>${renderSkillBar(jogador.skill)} ${renderHealthBar(jogador.health)}</div>`; item.addEventListener('click', (e) => { if (e.target.classList.contains('tooltip-text')) return; assignPlayerToSlot(jogador, slotElement); elements.playerModal.style.display = 'none'; }); playerList.appendChild(item); }); } elements.playerModal.style.display = 'block'; }
function assignPlayerToSlot(jogador, slotElement) { const otherSlot = document.querySelector(`.position-slot[data-assigned="${jogador.id}"]`); if (otherSlot) { const originalText = otherSlot.querySelector('div:first-child').innerHTML; delete otherSlot.dataset.assigned; otherSlot.classList.remove('assigned'); otherSlot.innerHTML = `<div>${originalText}</div><div class="muted">Clique para escalar</div>`; } slotElement.dataset.assigned = jogador.id; slotElement.innerHTML = `<div><strong>${jogador.name}</strong></div><div>${jogador.pos}</div><div class="muted">Habilidade: ${jogador.skill}%</div>`; slotElement.classList.add('assigned'); populateBench(); const assignedCount = document.querySelectorAll('.position-slot.assigned').length; elements.btnPlayMatch.disabled = assignedCount < 11; showNotif(`${jogador.name} escalado!`); }
function populateBench() { elements.bench.innerHTML = ''; const jogadoresNoBanco = hired.filter(jogador => !document.querySelector(`[data-assigned="${jogador.id}"]`)); if (jogadoresNoBanco.length === 0) { elements.bench.innerHTML = '<p class="muted">Todos escalados</p>'; return; } jogadoresNoBanco.forEach(jogador => { const div = document.createElement('div'); div.className = 'player-card'; div.innerHTML = `<div><div class="player-with-tooltip"><strong>${jogador.name}</strong><span class="tooltip-text">"${jogador.apresentacao}"</span></div><div class="muted">${jogador.pos} ‚Ä¢ ${jogador.foot} ‚Ä¢ ${jogador.age} anos</div></div><div class="muted">${formatReal(jogador.salarioJogo)}/jogo</div>`; elements.bench.appendChild(div); }); }
function openPostinhoModal() { populatePostinhoPlayerList(); elements.treatmentPanel.innerHTML = `<p class="muted" style="text-align: center; margin-top: 50px;">Selecione um jogador √† esquerda para o diagn√≥stico.</p>`; elements.postinhoModal.style.display = 'block'; }
function populatePostinhoPlayerList() { elements.postinhoPlayerList.innerHTML = ''; hired.sort((a,b) => a.health - b.health).forEach(p => { const item = document.createElement('div'); item.className = 'postinho-player-item'; item.dataset.playerId = p.id; item.innerHTML = `<div style="display: flex; justify-content: space-between; align-items: center;"><strong>${p.name}</strong><span class="muted">${p.health}%</span></div>${renderHealthBar(p.health)}`; item.onclick = () => selectPlayerForTreatment(p.id); elements.postinhoPlayerList.appendChild(item); }); }
function selectPlayerForTreatment(playerId) { const player = hired.find(p => p.id === playerId); if (!player) return; document.querySelectorAll('.postinho-player-item').forEach(el => { el.classList.toggle('selected', el.dataset.playerId === playerId); }); let diagnosisKey = 'high'; if (player.health <= 70) diagnosisKey = 'medium'; if (player.health < 50) diagnosisKey = 'low'; const diagnosisText = tairoQuotes[diagnosisKey][Math.floor(Math.random() * 3)]; let treatmentHTML = `<h3>Diagn√≥stico de ${player.name}</h3><p class="muted">Sa√∫de Atual: ${player.health}%</p><div class="diagnosis-box">‚Äú${diagnosisText}‚Äù</div><div class="treatment-list"><h4>Tratamentos Dispon√≠veis</h4>`; treatments.forEach(t => { let costText = ''; if (t.cost_type === 'percentage') { costText = `${t.cost * 100}% do Sal√°rio (${formatReal(player.salarioJogo * t.cost)})`; } else { costText = formatReal(t.cost); } treatmentHTML += `<div class="treatment-item"><div><strong>${t.name}</strong><div class="muted">Custo: ${costText}</div></div><button onclick="applyTreatment('${player.id}', '${t.id}')">Aplicar</button></div>`; }); treatmentHTML += `</div>`; elements.treatmentPanel.innerHTML = treatmentHTML; }
function applyTreatment(playerId, treatmentId) { const player = hired.find(p => p.id === playerId); const treatment = treatments.find(t => t.id === treatmentId); if (!player || !treatment) return; let cost = 0; if (treatment.cost_type === 'percentage') { cost = player.salarioJogo * treatment.cost; } else { cost = treatment.cost; } if (financas.caixaAtual < cost) { showNotif("Dinheiro em caixa insuficiente!"); return; } financas.caixaAtual -= cost; let healthGained = (typeof treatment.health_gain === 'function') ? treatment.health_gain() : treatment.health_gain; player.health = Math.min(100, player.health + healthGained); localStorage.setItem('financasDoTime', JSON.stringify(financas)); localStorage.setItem('elencoDoTime', JSON.stringify(hired)); showNotif(`${player.name} recebeu ${treatment.name}. Sa√∫de agora √© ${player.health}%.`); elements.cashDisplay.textContent = formatReal(financas.caixaAtual); selectPlayerForTreatment(playerId); populatePostinhoPlayerList(); populateBench(); }
function reassignPlayerToSlot(player, slotElement) { if (!player || !slotElement) return; slotElement.dataset.assigned = player.id; slotElement.innerHTML = `<div><strong>${player.name}</strong></div><div>${player.pos}</div><div class="muted">Habilidade: ${jogador.skill}%</div>`; slotElement.classList.add('assigned'); }
function openTreinoModal() { elements.treinoList.innerHTML = ''; const treinoRealizado = localStorage.getItem('treinoRealizado') === 'true'; trainingSessions.forEach(session => { const item = document.createElement('div'); item.className = 'treino-item'; let custoSaude = session.cost_health > 0 ? `<li>Custo de Sa√∫de: -${session.cost_health}% para jogadores do foco</li>` : ''; item.innerHTML = `<h4>${session.name}</h4><p class="muted">${session.description}</p><ul><li>Custo: ${formatReal(session.cost)}</li>${custoSaude}</ul><button data-session-id="${session.id}" ${treinoRealizado ? 'disabled' : ''}>Realizar Treino</button>`; elements.treinoList.appendChild(item); }); if (treinoRealizado) { const info = document.createElement('p'); info.className = 'muted'; info.style.textAlign = 'center'; info.style.fontWeight = 'bold'; info.textContent = 'O treino da semana j√° foi realizado. Jogue uma partida para treinar novamente.'; elements.treinoList.appendChild(info); } elements.treinoList.querySelectorAll('button').forEach(button => { button.onclick = () => realizarTreino(button.dataset.sessionId); }); elements.treinoModal.style.display = 'block'; }
function realizarTreino(sessionId) { const session = trainingSessions.find(s => s.id === sessionId); if (!session) return; if (financas.caixaAtual < session.cost) { showNotif("Dinheiro em caixa insuficiente para este treino!"); return; } financas.caixaAtual -= session.cost; hired.forEach(p => { let isFocusPlayer = session.focus === 'all' || session.focus.includes(p.pos); if (isFocusPlayer) { p.health = Math.max(0, p.health - session.cost_health); if (session.reward_type === 'skill') { const ageFactor = Math.max(0, (30 - p.age) * 0.01); const finalChance = session.reward_chance + ageFactor; if (Math.random() < finalChance) { p.skill = Math.min(100, p.skill + session.reward_value); showNotif(`${p.name} evoluiu sua habilidade!`, 1500); } } } }); if (session.reward_type === 'entrosamento') { teamStats.entrosamento = Math.min(100, teamStats.entrosamento + session.reward_value); showNotif(`O entrosamento do time aumentou para ${teamStats.entrosamento}!`); } if (session.reward_type === 'stamina') { showNotif(`A resist√™ncia do time melhorou!`); } localStorage.setItem('financasDoTime', JSON.stringify(financas)); localStorage.setItem('elencoDoTime', JSON.stringify(hired)); localStorage.setItem('teamStats', JSON.stringify(teamStats)); localStorage.setItem('treinoRealizado', 'true'); elements.cashDisplay.textContent = formatReal(financas.caixaAtual); populateBench(); elements.treinoModal.style.display = 'none'; showNotif(`Treino de "${session.name}" realizado com sucesso!`, 2500); }

function init() {
  hired = JSON.parse(localStorage.getItem('elencoDoTime')) || [];
  userData = JSON.parse(localStorage.getItem('userData')) || {};
  financas = JSON.parse(localStorage.getItem('financasDoTime')) || { caixaAtual: 5000, gastosContratacoes: 0, gastosSalarios: 0, gastosBicho: 0, receitaPartidas: 0, receitaPremiosPatrocinios: 0 };
  zapMessages = JSON.parse(localStorage.getItem('zapMessages')) || [];
  teamStats = JSON.parse(localStorage.getItem('teamStats')) || { entrosamento: 50 };
  if(hired.length < 22) { alert("Elenco incompleto! Volte ao mercado."); window.location.href = 'mercado.html'; return; }
  
  elements.headerTitle.textContent = userData.teamName || 'O Rei da V√°rzea';
  elements.cashDisplay.textContent = formatReal(financas.caixaAtual);
  checkZapNotifications();

  const savedFormation = localStorage.getItem('formacaoAtual') || '4-4-2';
  const savedLineup = JSON.parse(localStorage.getItem('escalacaoFinal')) || {};
  elements.formationSelect.value = savedFormation;
  drawPitch(savedFormation);
  if (Object.keys(savedLineup).length > 0) {
      Object.keys(savedLineup).forEach(slotId => {
          const playerId = savedLineup[slotId];
          const slotElement = document.getElementById(slotId);
          const player = hired.find(p => p.id === playerId);
          reassignPlayerToSlot(player, slotElement);
      });
      elements.btnPlayMatch.disabled = document.querySelectorAll('.position-slot.assigned').length < 11;
  }
  
  populateBench();

  elements.financeBox.onclick = openFinanceModal;
  elements.zapButton.onclick = openZapModal;
  elements.postinhoButton.onclick = openPostinhoModal;
  elements.treinoButton.onclick = openTreinoModal;
  elements.financeModalClose.onclick = () => elements.financeModal.style.display = 'none';
  elements.playerModalClose.onclick = () => elements.playerModal.style.display = 'none';
  elements.zapModalClose.onclick = () => elements.zapModal.style.display = 'none';
  elements.postinhoModalClose.onclick = () => elements.postinhoModal.style.display = 'none';
  elements.treinoModalClose.onclick = () => elements.treinoModal.style.display = 'none';
  window.onclick = (event) => { if (event.target.classList.contains('modal')) { event.target.style.display = 'none'; } };
  
  elements.linkTela4.addEventListener('click', (event) => {
      if(elements.btnPlayMatch.disabled) { event.preventDefault(); showNotif("Voc√™ precisa escalar 11 jogadores para a partida!"); return; }
      const lineup = {};
      document.querySelectorAll('.position-slot[data-assigned]').forEach(slot => { lineup[slot.id] = slot.dataset.assigned; });
      localStorage.setItem('escalacaoFinal', JSON.stringify(lineup));
      localStorage.setItem('formacaoAtual', elements.formationSelect.value);
      localStorage.setItem('financasDoTime', JSON.stringify(financas));
  });
  
  elements.formationSelect.addEventListener('change', (e) => { unassignAllPlayers(); drawPitch(e.target.value); });
}

init();
